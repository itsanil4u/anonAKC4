#Creating a Table#
CREATE DATABASE IF NOT EXISTS sales;
CREATE TABLE table_name
(
column_1 data_type constratints,
.
.
.
.
column_n data_type constraints
);
CREATE TABLE sales
(
purchase_number INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
date_of_purchase DATE NOT NULL,
customer_id INT,
item_code VARCHAR(10) NOT NULL
);
DROP TABLE sales;
#Primary Key#
CREATE TABLE sales
(
purchase_number INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
date_of_purchase DATE NOT NULL,
customer_id INT,
item_code VARCHAR(10) NOT NULL
PRIMARY KEY (purchase_number)
);
#Foreign Key#
CREATE TABLE sales
(
purchase_number INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
date_of_purchase DATE NOT NULL,
customer_id INT,
item_code VARCHAR(10) NOT NULL
PRIMARY KEY (purchase_number),
FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE
);
#How to use ALTER Key#
CREATE TABLE sales
(
purchase_number INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
date_of_purchase DATE NOT NULL,
customer_id INT,
item_code VARCHAR(10) NOT NULL
PRIMARY KEY (purchase_number)
);
ALTER TABLE sales
ADD FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE;
ALTER TABLE sales
DROP FOREIGN KEY sales_ibfk_1;
#Unique Key#
CREATE TABLE customers
(
customer_id INT PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(255),
last_name VARCHAR(255),
email_address VARCHAR(255),
number_of_complaints INT
PRIMARY KEY (customer_id)
UNIQUE KEY (email_address)
);
(or)
CREATE TABLE customers
(
customer_id INT PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(255),
last_name VARCHAR(255),
email_address VARCHAR(255),
number_of_complaints INT
PRIMARY KEY (customer_id)
);
ALTER TABLE customers
ADD UNIQUE KEY (email_address);

ALTER TABLE customers
DROP INDEX email_address;
#DEFAULT Constraint#

CREATE TABLE customers
(
customer_id INT PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(255),
last_name VARCHAR(255),
email_address VARCHAR(255),
number_of_complaints INT
PRIMARY KEY (customer_id)
);
ALTER TABLE customers
CHANGE COLUMN number_of_complaints number_of_complaints INT DEFAULT 0;

INSERT INTO COLUMNS (first_name last_name gender)
VALUES ('Peter' 'Figaro' 'M');

ALTER TABLE customers
ALTER COLUMN number_of_complaints DROP DEFAULT;

#NOT NULL Constraint#

CREATE TABLE companies
(
company_id INT AUTO_INCREMENT,
headquarters_phone_number VARCHAR(255),
company_name VARCHAR(255) NOT NULL,
PRIMARY KEY (company_id)
);
 (or)
 
CREATE TABLE companies
(
company_id INT AUTO_INCREMENT,
headquarters_phone_number VARCHAR(255),
company_name VARCHAR(255),
PRIMARY KEY (company_id)
);
ALTER TABLE companies
ALTER COLUMN company_name
CHANGE COLUMN company_name company_name NOT NULL;

#SELECT Statement#

SELECT * FROM employees
WHERE first_name = 'Denis" OR first_name = 'Elvis' AND gender = 'M';

SELECT * FROM employees
WHERE first_name = 'Denis' AND (gender = 'M' OR gender = 'F');   {AND > OR} - Operator Precedence

#IN-NOT IN Statement#

SELECT * FROM employees
WHERE first_name IN ('Denis', 'Kathy', 'Mark', 'Nathan'); - #This code gives the names of the employees whose first names are 'Denis', 'Kathy', 'Mark', "Nathan'#
#This code is the replacement of the code :
SELECT * FROM employees
WHERE first_name = 'Denis' OR first_name = 'Kathy' OR first_name = 'Mark' OR first_name = 'Nathan'; #

SELECT * FROM employees
WHERE first_name NOT IN ('Denis', 'Kathy', 'Mark', 'Nathan'); - #This code gives the names of the employees whose first names are not 'Denis', 'Kathy', 'Mark', "Nathan'#

#LIKE NOT LIKE Statement#

SELECT * FROM employees
WHERE first_name LIKE ('Den%');
#This code gives all the names that start with 'Den' regardless of the length of the name#
SELECT * FROM employees
WHERE first_name LIKE ('%Den');
#This code gives all the names that end with 'Den' regardless of the length of the name#
SELECT * FROM employees
WHERE first_name LIKE ('Deni_');
#This code gives all the names that start with 'Deni' with a single character after it #
SELECT * FROM employees
WHERE first_name NOT LIKE ('%Den');
#This code gives all the names that does not end with 'Den' regardless of the length of the name#

#BETWEEN AND Statement#

SELECT * FROM employees
WHERE hire_date BETWEEN '1990-01-01' AND '2000-01-01';
#Refers to interval between the included values#

SELECT * FROM employees
WHERE hire_date NOT BETWEEN '1990-01-01' AND '2000-01-01';

#NOT BETWEEN AND Statement refers to an intervalComposed of two parts :
1. an interval below the first value included and
2. second interval above the second value included#

#IS NOT NULL-IS NULL Statement#

SELECT * FROM employees
WHERE first_name IS NOT NULL;
#This code displays all the first name values which are not null#

SELECT * FROM employees
WHERE first_name NOT NULL;
#This code displays all the first name values which are null#

#SELECT DISTINCT Statement#

SELECT gender
FROM employees;
#Refer to the values of a particular row#

SELECT DISTINCT gender
FROM employees;
#Refer to the distinct values in a particular row#

#COUNT() Statement#

SELECT COUNT(emp_id)
FROM employees;
#Refers to number of employees in the database#

SELECT COUNT(DISTINCT first_name)
FROM employees;
#Refers to number of distinct employee names in the database#

#ORDER BY Statement#
SELECT * FROM employees ORDER BY first_name;

#GROUP BY Statement#

SELECT first_name, COUNT(first_name) FROM employees GROUP BY first_name ORDER BY first_name DESC;

#WHERE Vs HAVING Statement#

SELECT first_name, COUNT(first_name) AS name_count
FROM
employees
WHERE hire_date > '2000-01-01"
GROUP BY first_name
having COUNT(first_name) < 200
ORDER BY first_name DESC;

#LIMIT Statement#

SELECT first_name, COUNT(first_name) AS name_count
FROM
employees
WHERE hire_date > '2000-01-01"
GROUP BY first_name
having COUNT(first_name) < 200
ORDER BY first_name DESC
LIMIT 100;

#INSERT INTOI Statement#

SELECT *
FROM
employees
LIMIT 10;

INSERT INTO
employees
(
emp_id
birth_date
first_name
last_name
gender
hire_date)
VALUES
(
999901
'1986-04-04'
'John'
'Smith'
'M'
'2011-01-01'
);

(or)

INSERT INTO
VALUES
(
999901
'1986-04-04'
'John'
'Smith'
'M'
'2011-01-01'
);

#UPDATE Statement#

UPDATE
SET
first_name = 'Stella'
last_name = 'Parkinson'
birth_date = '1990-12-31'
gender = 'F'
WHERE
emp_id = 999901;

#DELETE Statement#

DELETE FROM employees
WHERE
emp_id = 999903;

#ROUND Statement#

SELECT 
ROUND(AVG(salary),2)
FROM
salaries;

#Rounds up the values you to 2 decimal points#

#IFNULL Statement#

SELECT 
dept_no
IFNULL(dept_name,'Department name not provided') AS dept_name
FROM
departments_dup;

#COALESCE Statement#

SELECT 
dept_no,
dept_name,
COALESCE(dept_manager, dept_name, 'N/A') AS dept_manager
FROM
departments_dup
ORDER BY dept_no ASC;

#INNER JOIN#

SELECT m.dept_no m.emp_no d.dept_name
FROM dept_manager_dup m
INNER JOIN 
dept_dup d ON m.dept_no = d.dept_no
ORDER BY m.dept_no;

#CROSS JOIN#

SELECT
dm.*, d.*
FROM
dept_managers dm
CROSS JOIN
departments d
ORDER BY 
dm.emp_no, d.dept_no;
(or)
SELECT
dm.*, d.*
FROM
dept_managers dm,
departments d
ORDER BY 
dm.emp_no, d.dept_no;
(or)
SELECT
dm.*, d.*
FROM
dept_managers dm
JOIN
departments d
ORDER BY 
dm.emp_no, d.dept_no;

#Aggregate functions with JOINS#

SELECT
e.gender, AVG(s.salary) AS average_salary
FROM
employees e
JOIN
salaries s ON e.emp_no = s.emp_no
GROUP BY gender;

#JOIN more than two tables in SQL#

SELECT
e.first_name
e.last_name
e.hire_date
m.from_date
d.dept_name
FROM
employees e
JOIN
dept_manager m ON e.emp_no = m.emp_no
JOIN
departments d ON m.dept_no = d.dept_no;

#UNION Vs UNION ALL Statement#

SELECT
e.emp_no,
e.first_name,
e.last_name,
NULL AS dept_no,
NULL AS from_date
FROM employees_dup e
WHERE e.emp_no = 10001
UNION ALL SELECT
NULL AS emp_no,
NULL AS first_name,
NULL AS last_name,
m.dept_no,
m.from_date
FROM
dept_manager m;

#UNION ALL Statement#

SELECT
e.emp_no,
e.first_name,
e.last_name,
NULL AS dept_no,
NULL AS from_date
FROM employees_dup e
WHERE e.emp_no = 10001
UNION SELECT
NULL AS emp_no,
NULL AS first_name,
NULL AS last_name,
m.dept_no,
m.from_date
FROM
dept_manager m;

#UNION Statement#

#Seubqueries with IN nested inside WHERE#

SELECT
e.first_name, e.last_name
FROM 
employees e
WHERE e.emp_no IN (SELECT dm.emp_no FROM dept_manager dm);

#Employee numbers that can be found in the Department Manager Table#

#EXISTS - NON EXISTS Subquery#

SELECT
e.first_name, e.last_name
FROM
employees e
WHERE
EXISTS(SELECT * FROM dept_manager dm WHERE dm.emp_no = e.emp_no)
ORDER BY emp_no;

#SQL Subqueries nested in SELECT and FROM#

SELECT A*
(SELECT 
e.emp_no AS employee_ID
MIN(de.dept_no) AS department_code
(SELECT
emp_no
FROM
dept_manager
WHERE
emp_no = 110022) AS manager_id
FROM
employees e
JOIN
dept_emp de ON e.emp_no = de.emp_no
WHERE e.emp_no <= 10020
GROUP BY e.emp_no
ORDER BY e.emp_no) AS A
UNION
SELECT B*
(SELECT 
e.emp_no AS employee_ID
MIN(de.dept_no) AS department_code
(SELECT
emp_no
FROM
dept_manager
WHERE
emp_no = 110039) AS manager_id
FROM
employees e
JOIN
dept_emp de ON e.emp_no = de.emp_no
WHERE e.emp_no > 10020
GROUP BY e.emp_no
ORDER BY e.emp_no
LIMIT 20) AS B;

#SELF JOIN Statement#

SELECT DISTINCT
e1.*
FROM 
emp_manager e1
JOIN
emp_manager e2 ON  e1.emp_no = e2.manager_no;

#VIEW Statement#

CREATE OR REPLACE VIEW v_dept_emp_latest_date AS
SELECT emp_no, MAX(from_date) AS from_date, MAX(to_date) AS to_date
FROM
dept_emp
GROUP BY emp_no;





