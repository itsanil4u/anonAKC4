SELECT - FROM - exercise
Select the information from the ‚Äúdept_no‚Äù column of the ‚Äúdepartments‚Äù table.

SELECT 
dept_no
FROM
departments;

Select all data from the ‚Äúdepartments‚Äù table.

SELECT * 
FROM
departments;

WHERE - exercise
Select all people from the ‚Äúemployees‚Äù table whose first name is ‚ÄúElvis‚Äù. üòä

SELECT *
FROM 
employees
WHERE 
first_name = 'Elvis';

AND - exercise
Retrieve a list with all female employees whose first name is Kellie.

SELECT *
FROM
employees
WHERE
gender ='F' AND first_name = 'Kellie';

OR - exercise
Retrieve a list with all employees whose first name is either Kellie or Aruna.

SELECT *
FROM
employees
WHERE 
first_name ('Kellie', 'Aruna');

SELECT *
FROM
employees
WHERE 
first_name ='Kellie' OR first_name = 'Aruna';

Operator precedence - exercise
Retrieve a list with all female employees whose first name is either Kellie or Aruna.

SELECT *
FROM
employees
WHERE gender = 'F' AND (first_name = 'Kellie' OR first_name = 'Aruna');

IN - NOT IN - exercise 1
Use the IN operator to select all individuals from the ‚Äúemployees‚Äù table, whose first name is either ‚ÄúDenis‚Äù, or ‚ÄúElvis‚Äù.

SELECT *
FROM
employees
WHERE 
first_name IN ('Denis', 'Elvis');

IN - NOT IN - exercise 2
Extract all records from the ‚Äòemployees‚Äô table, aside from those with employees named John, Mark, or Jacob.

SELECT *
FROM
employees
WHERE
first_name NOT IN ('John', 'Mark', 'Jacob');

LIKE - NOT LIKE - exercise
Working with the ‚Äúemployees‚Äù table, use the LIKE operator to select the data about all individuals, whose first name starts with ‚ÄúMark‚Äù; specify that the name can be succeeded by any sequence of characters.

Retrieve a list with all employees who have been hired in the year 2000.

Retrieve a list with all employees whose employee number is written with 5 characters, and starts with ‚Äú1000‚Äù. 

SELECT *
FROM
employees
WHERE
first_name LIKE ('Mark%');

SELECT *
FROM
employees
WHERE
hire_date LIKE ('%2000%');

SELECT *
FROM
employees
WHERE
emp_no LIKE ('1000_');

Wildcard characters - exercise
Extract all individuals from the ‚Äòemployees‚Äô table whose first name contains ‚ÄúJack‚Äù.

Once you have done that, extract another list containing the names of employees that do not contain ‚ÄúJack‚Äù.

SELECT *
FROM
employees
WHERE
first_name LIKE '%Jack%';

SELECT *
FROM
employees
WHERE
first_name NOT LIKE '%Jack%';

BETWEEN - AND - exercise
Select all the information from the ‚Äúsalaries‚Äù table regarding contracts from 66,000 to 70,000 dollars per year.

Retrieve a list with all individuals whose employee number is not between ‚Äò10004‚Äô and ‚Äò10012‚Äô.

Select the names of all departments with numbers between ‚Äòd003‚Äô and ‚Äòd006‚Äô.

SELECT *
FROM
salaries
salary BETWEEN '66000' AND '70000';

SELECT *
FROM
employees
emp_no NOT BETWEEN '10004' AND '10012';

SELECT *
FROM
departments
dept_no BETWEEN 'd003' AND 'd006';

IS NOT NULL - IS NULL - exercise
Select the names of all departments whose department number value is not null.

SELECT 
dept_name
FROM
departments
WHERE dept_no IS NOT NULL;

Other comparison operators - exercise
Retrieve a list with data about all female employees who were hired in the year 2000 or after.

Hint: If you solve the task correctly, SQL should return 7 rows.

Extract a list with all employees‚Äô salaries higher than $150,000 per annum.

SELECT
*
FROM
employees
WHERE
hire_date >= '2000-01-01'
AND gender = 'F';

SELECT
*
FROM
salaries
WHERE
salary > 150000;

SELECT DISTINCT - exercise
Obtain a list with all different ‚Äúhire dates‚Äù from the ‚Äúemployees‚Äù table.

SELECT DISTINCT
hire_date
FROM
employees;

Introduction to aggregate functions - exercise
How many annual contracts with a value higher than or equal to $100,000 have been registered in the salaries table?

How many managers do we have in the ‚Äúemployees‚Äù database? Use the star symbol (*) in your code to solve this exercise.

SELECT COUNT(*)
FROM
salaries
WHERE
salary >= 100000;

SELECT COUNT(*)
FROM
dept_manager;

Select all data from the ‚Äúemployees‚Äù table, ordering it by ‚Äúhire date‚Äù in descending order.

SELECT *
FROM
employees
ORDER BY hire_date DESC;

Using Aliases (AS) - exercise
This will be a slightly more sophisticated task.

Write a query that obtains two columns. The first column must contain annual salaries higher than 80,000 dollars. The second column, renamed to ‚Äúemps_with_same_salary‚Äù, must show the number of employees contracted to that salary. Lastly, sort the output by the first column.

SELECT
salary, COUNT(emp_no) AS emps_with_same_salary
FROM
salaries
WHERE 
salary > 80000
GROUP BY salary
ORDER BY salary;

HAVING - exercise
Select all employees whose average salary is higher than $120,000 per annum.

SELECT
emp_no, AVG(salary)
FROM
salaries
GROUP BY emp_no
HAVING AVG(salary) > 120000
ORDER BY emp_no;

WHERE vs HAVING - Part II - exercise
Select the employee numbers of all individuals who have signed more than 1 contract after the 1st of January 2000.

SELECT 
emp_no
FROM
dept_emp
WHERE from_date > '2000-01-01'
GROUP BY emp_no
HAVING COUNT(from_date) > 1
ORDER BY emp_no;

LIMIT - exercise
Select the first 100 rows from the ‚Äòdept_emp‚Äô table. 

SELECT *
FROM
dept_emp
LIMIT 100;

INNER JOIN - Part II - exercise
Extract a list containing information about all managers‚Äô employee number, first and last name, department number, and hire date. 

SELECT 
e.managers
e.emp_no
e.first_name
e.last_name
dm.dept_no
e.hire_date
FROM
employees e
JOIN
dept_manager dm ON e.emp_no = dm.emp_no;

LEFT JOIN - Part II - exercise
Join the 'employees' and the 'dept_manager' tables to return a subset of all the employees whose last name is Markovitch. See if the output contains a manager with that name.  

Hint: Create an output containing information corresponding to the following fields: ‚Äòemp_no‚Äô, ‚Äòfirst_name‚Äô, ‚Äòlast_name‚Äô, ‚Äòdept_no‚Äô, ‚Äòfrom_date‚Äô. Order by 'dept_no' descending, and then by 'emp_no'.

SELECT
e.emp_no, e.first_name, e.last_name, dm.dept_no, dm.from_date
FROM 
employees e
LEFT JOIN
dept_manager dm ON e.emp_no = dm.emp_no
WHERE last_name = 'Markovitch'
ORDER BY dm.dept_no DESC, e.emp_no;

JOIN and WHERE Used Together - exercise
Select the first and last name, the hire date, and the job title of all employees whose first name is ‚ÄúMargareta‚Äù and have the last name ‚ÄúMarkovitch‚Äù.

SELECT
e.first_name, e.last_name, e.hire_date, t.title
FROM
employees e
JOIN
titles t ON e.emp_no = t.emp_no
WHERE
first_name = 'Margareta' AND last_name = 'Markovitch'
ORDER BY e.emp_no;

CROSS JOIN - exercise 1
Use a CROSS JOIN to return a list with all possible combinations between managers from the dept_manager table and department number 9.

SELECT
dm.*, d.*
FROM
departments d
CROSS JOIN
dept_manager dm
WHERE d.dept_no = 'd009'
ORDER BY d.dept_name;

CROSS JOIN - exercise 2
Return a list with the first 10 employees with all the departments they can be assigned to.

Hint: Don‚Äôt use LIMIT; use a WHERE clause.

SELECT
e.*, d.*
FROM
employees e
CROSS JOIN
departments d
WHERE 
e.emp_no < '10011'
ORDER BY e.emp_no, d.dept_name;

Join more than two tables in SQL - exercise
Select all managers‚Äô first and last name, hire date, job title, start date, and department name.

SELECT
e.first_name
e.last_name
e.hire_date
t.title
m.from_date
d.dept_name
FROM
departments d
JOIN
dept_manager m ON d.dept_no = m.dept_no
JOIN
employees e ON m.emp_no = e.emp_no
JOIN
titles t ON e.emp_no = t.emp_no;
WHERE
t.title = 'Manager'
ORDER BY e.emp_no;

